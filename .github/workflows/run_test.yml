name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.filter.outputs.src }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            src:
              - 'include/**/*'
              - 'test/**/*'

  build:
    needs: changes
    runs-on: ${{ matrix.os.name }}-${{ matrix.os.version }}
    if: ${{ needs.changes.outputs.build == 'true' }}
    strategy:
      fail-fast: false

      matrix:
        os:
          - name: ubuntu
            version: 24.04
          - name: windows
            version: 2022
        build_type: [Release, Debug]
        cpp_version: [20, 23, 26]
        boost_version: [1.86.0]
        compiler:
          - vendor: GNU
            version: 13
            executable: g++-13
          - vendor: GNU
            version: 14
            executable: g++-14
          - vendor: LLVM
            version: 19
            executable: clang++-19
            cxxflags: -stdlib=libc++
          - vendor: LLVM
            version: 20
            executable: clang++-20
            cxxflags: -stdlib=libc++
          - vendor: Microsoft
            version: v142
            executable: cl
        exclude:
          - compiler:
              vendor: GNU
              version: 13
            cpp_version: 26
          - os:
              name: windows
            compiler:
              vendor: GNU
          - os:
              name: windows
            compiler:
              vendor: LLVM
          - os:
              name: ubuntu
            compiler:
              vendor: Microsoft

    steps:
      - uses: actions/checkout@v4

      - name: Setup Clang
        if: matrix.compiler.vendor == 'LLVM'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh ${{ matrix.compiler.version }} all

      - name: Setup GCC
        if: matrix.compiler.vendor == 'GNU'
        run: sudo apt update && sudo apt install -y g++-${{ matrix.compiler.version }}

      - name: Install Dependencies
        if: matrix.os.name == 'ubuntu'
        run: sudo apt update && sudo apt install -y libtbb-dev

      - name: Cache Boost
        uses: actions/cache@v4
        id: cache-boost
        with:
          path: ${{ github.workspace }}/boost/dist
          key: boost-${{ matrix.boost_version }}-${{ matrix.os.name }}-${{ matrix.compiler.executable }}-${{ matrix.cpp_version }}

      - name: Clone Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: boostorg/boost
          ref: boost-${{ matrix.boost_version }}
          path: boost

      - name: Configure Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/boost
        run: |
          git submodule update --depth 1 --init tools/boostdep
          git submodule update --depth 1 --init tools/cmake
          git submodule update --depth 1 --init libs/stacktrace
          git submodule update --depth 1 --init libs/test
          python3 tools/boostdep/depinst/depinst.py -X test -g "--depth 1" stacktrace
          python3 tools/boostdep/depinst/depinst.py -X test -g "--depth 1" test

      - name: Build Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        env:
          cmake_options: >-
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler.executable }}
            -DCMAKE_CXX_FLAGS=${{ matrix.compiler.cxxflags }}
            -DCMAKE_CXX_STANDARD=${{ matrix.cpp_version }}
            -DBUILD_SHARED_LIBS=ON
            -DCMAKE_DEBUG_POSTFIX=d
        working-directory: ${{ github.workspace }}/boost
        run: |
          cmake -Bbuild -S. ${{ env.cmake_options }} -DCMAKE_BUILD_TYPE=Debug
          cmake --build build -j --config Debug
          cmake --install build --prefix dist --config Debug
          cmake -Bbuild -S. ${{ env.cmake_options }} -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j --config Release
          cmake --install build --prefix dist --config Release

      - name: Configure
        run: >
          cmake -B ${{ github.workspace }}/build
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler.executable }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_CXX_STANDARD=${{ matrix.cpp_version }}
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/boost/dist
          -S ${{ github.workspace }}

      - name: Build (Ubuntu)
        if: matrix.os.name == 'ubuntu'
        run: cmake --build ${{ github.workspace }}/build --verbose --config ${{ matrix.build_type }} --target yk_util_test 2>&1 | tee compilation_ubuntu_${{ matrix.compiler.vendor }}.log

      - name: Build (Windows)
        if: matrix.os.name == 'windows'
        run: cmake --build ${{ github.workspace }}/build/test --verbose --config ${{ matrix.build_type }} --target yk_util_test 2>&1 | tee compilation_msvc.log

      - name: Test (Ubuntu)
        if: matrix.os.name == 'ubuntu'
        working-directory: ${{ github.workspace }}/build/test
        run: ./yk_util_test --report_level=short

      - name: Test (Windows)
        if: matrix.os.name == 'windows'
        working-directory: ${{ github.workspace }}/build/test/${{ matrix.build_type }}
        run: |
          copy ${{ github.workspace }}/boost/dist/bin/*.dll .
          ./yk_util_test --report_level=short

      - uses: actions/upload-artifact@v4
        with:
          name: compilation_${{ matrix.os.name }}-${{ matrix.os.version }}_${{ matrix.boost_version }}_${{ matrix.compiler.executable }}_${{ matrix.build_type }}_log
          path: compilation*.log

  run-notifier:
    runs-on: ubuntu-latest
    needs: [changes, build]
    steps:
      - uses: actions/download-artifact@v4
      - uses: yaito3014/cpp-warning-notifier@v0.2.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_ID: ${{ vars.APP_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          CLIENT_ID: ${{ vars.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          INSTALLATION_ID: ${{ vars.INSTALLATION_ID }}
